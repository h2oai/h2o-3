description = "H2O MOJO Pipeline support"

dependencies {
    api project(":h2o-core")
    api project(":h2o-genmodel-ext-mojo-pipeline")
    compileOnly "ai.h2o:mojo2-runtime-api:${mojo2version}"
    compileOnly "ai.h2o:mojo2-runtime-impl:${mojo2version}"


    testImplementation project(":h2o-test-support")
    testImplementation "net.sf.opencsv:opencsv:2.3"
    testRuntimeOnly project(":${defaultWebserverModule}")
    testImplementation "ai.h2o:mojo2-runtime-api:${mojo2version}"
    testImplementation "ai.h2o:mojo2-runtime-impl:${mojo2version}"
}

apply from: "${rootDir}/gradle/dataCheck.gradle"

def daiLicense = System.getenv('DRIVERLESS_AI_LICENSE_FILE')
def mojoTestDir = System.getenv('MOJO_PIPELINE_TEST_DIR')

task daiEnvironmentCheck {
    onlyIf { ext.has("isCI") && ext.get("isCI") }
    doLast {
        if (!daiLicense || !file(daiLicense).isFile()) {
            throw new ResourceException('Please make sure environment variable DRIVERLESS_AI_LICENSE_FILE is defined and points to a valid DAI license file.')
        }
        if (!mojoTestDir || !file(mojoTestDir).isDirectory()) {
            throw new ResourceException('Environment property MOJO_PIPELINE_TEST_DIR is not pointing to a valid directory.')
        }
    }
}

if (mojoTestDir && file(mojoTestDir).isDirectory() && file(mojoTestDir).listFiles()) {
    task extractMojoRuntime(type: Copy) {
        def sourceMojoDir = file(mojoTestDir).listFiles().head()
        def zipFile = new File(sourceMojoDir, "mojo.zip")
        def outputDir = file("${buildDir}/mojo2/")
        include "**/mojo2-runtime.jar"
        from zipTree(zipFile)
        into outputDir
    }
} else {
    task extractMojoRuntime {
        onlyIf { ext.has("isCI") && ext.get("isCI") }
        doLast {
            throw new ResourceException("MOJO_PIPELINE_TEST_DIR doesn't point to a valid non-empty MOJO test location.")
        }
    }
}

extractMojoRuntime.dependsOn daiEnvironmentCheck
testSingleNode.dependsOn extractMojoRuntime

test {
    dependsOn ":h2o-core:testJar"
    // Note: multi node tests are ignored right now!
    dependsOn smalldataCheck, jar, testJar, testSingleNode

    // Defeat task 'test' by running no tests.
    exclude '**'
}
