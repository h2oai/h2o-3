@Library('test-shared-library') _
import ai.h2o.ci.buildsummary.StagesSummary

DEFAULT_LABEL = 'mr-0xc10'

// initialize build summary
buildSummary('https://github.com/h2oai/h2o-3', true)
// use default StagesSummary implementation
buildSummary.get().addStagesSummary(this, new StagesSummary())

properties([
    parameters([
        booleanParam(defaultValue: false, description: 'Build even if the image is already present in the repository', name: 'forceBuild'),
        booleanParam(defaultValue: false, description: 'Publish built images', name: 'publish'),
        string(defaultValue: 'master', description: 'H2O-3 Branch used to load dependencies.', name: 'h2oBranch'),
        booleanParam(name: 'noCache', defaultValue: true, description: 'If set to true, the docker image is built from scratch, with no stages used from the cache.')
    ])
])

IMAGE_NAME_PREFIX = 'harbor.h2o.ai/opsh2oai/h2o-3'

JDK_VERSIONS = ['8', '10', '11', '12', '13', '14', '15', '16', '17']
JDK_VERSIONS_PY_R = ['8', '11', '17'] // stable, last-supported, latest
PYTHON_VERSIONS = ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11']
R_VERSION = ['3.3.3', '3.4.1', '3.5.3', '3.6.2', '4.0.2', '4.4.0']

def pipelineContext

ansiColor('xterm') {
    timestamps {
        def checkoutStageName = 'Checkout and Init'
        buildSummary.stageWithSummary(checkoutStageName) {
            node (DEFAULT_LABEL) {
                buildSummary.refreshStage(checkoutStageName)
                cleanWs()
                def scmEnv = checkout scm

                def final pipelineContextFactory = load('scripts/jenkins/groovy/pipelineContext.groovy')
                pipelineContext = pipelineContextFactory('.', 'MODE_BUILD_DOCKER', scmEnv, true)
                def currentVersion = pipelineContext.getBuildConfig().getDefaultImageVersion()
                currentBuild.displayName = "v${currentVersion} #${currentBuild.number}"

                if (params.publish && !params.forceBuild) {
                    if (pipelineContext.getUtils().dockerImageExistsInRegistry(this, 'harbor.h2o.ai', 'opsh2oai', 'h2o-3/dev-base', "${currentVersion}")) {
                        error "Image already exists. Use forceBuild if you wish to overwrite."
                    }
                } else {
                    manager.addBadge("warning.gif", "forceBuild enabled")
                }

                dir('docker') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS S3 Credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        docker.image('harbor.h2o.ai/opsh2oai/s3cmd').inside("-e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}") {
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-8/x64-linux/jdk-8u311-linux-x64.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-10/x64-linux/jdk-10.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-11/x64-linux/jdk-11.0.3_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-12/x64-linux/jdk-12.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-13/x64-linux/jdk-13.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-14/x64-linux/jdk-14.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-15/x64-linux/jdk-15.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-16/x64-linux/jdk-16.0.2_linux-x64_bin.tar.gz"
                            sh "s3cmd get s3://artifacts.h2o.ai/releases/oracle/jdk-17/x64-linux/jdk-17.0.0_linux-x64_bin.tar.gz"
                        }
                    }
                    stash name: 'docker-sources'
                }
            }
        }

        buildInParallel(pipelineContext, ['dev-base'])
        buildInParallel(pipelineContext, ['dev-jdk-8-base', 'dev-jdk-others-base'])

        buildInParallel(pipelineContext, ['dev-python-base'])
        def pythonImages = []
        PYTHON_VERSIONS.each {version ->
            pythonImages += "dev-python-${version}"
        }
        buildInParallel(pipelineContext, pythonImages)

        buildInParallel(pipelineContext, ['dev-r-base'])
        def componentImages = []
        R_VERSION.each {version ->
            componentImages += "dev-r-${version}"
        }
        JDK_VERSIONS.each {version ->
            componentImages += "dev-jdk-${version}"
        }
        componentImages += "dev-mojocompat"
        buildInParallel(pipelineContext, componentImages)

        buildInParallel(pipelineContext, ["dev-build-base"])
        buildInParallel(pipelineContext, ["dev-build-hadoop"],)
        buildInParallel(pipelineContext, ["dev-release"])

        def componentJdkImages = []
        PYTHON_VERSIONS.each {version ->
            JDK_VERSIONS_PY_R.each {jdkVersion ->
                componentJdkImages += "dev-python-${version}-jdk-${jdkVersion}"
            }
        }
        R_VERSION.each {version ->
            JDK_VERSIONS_PY_R.each {jdkVersion ->
                componentJdkImages += "dev-r-${version}-jdk-${jdkVersion}"
            }
        }
        buildInParallel(pipelineContext, componentJdkImages)
    }
}

private buildInParallel(final pipelineContext, final targets) {
    parallel(targets.collectEntries { target ->
        [
                (target): makeStage(pipelineContext, target),
        ]
    })
}

private Closure makeStage(final pipelineContext, String target) {
    return {
        def buildImageStageName = "Build $target"
        buildSummary.stageWithSummary(buildImageStageName) {
            final String noCache = params.noCache ? "--no-cache" : ""
            node (DEFAULT_LABEL) {
                buildSummary.refreshStage(buildImageStageName)
                dir (target) {
                    deleteDir()
                    unstash 'docker-sources'
                    pullPreviousVersionIfRequired(pipelineContext, target)
                    sh """
                                make \
                                    CI=1 \
                                    H2O_BRANCH=${params.h2oBranch} \
                                    VERSION=${pipelineContext.getBuildConfig().getDefaultImageVersion()} \
                                    PUSH=${params.publish} \
                                    NO_CACHE=${noCache} \
                                    ${target}
                            """
                }
            }
        }
    }
}

def pullPreviousVersionIfRequired(final pipelineContext, final String image) {
    def previousVersion = pipelineContext.getBuildConfig().getDefaultImageVersion() - 1
    // hack for first version of image
    if (previousVersion <= 0) {
        previousVersion = 1
    }
    if (pipelineContext.getUtils().dockerImageExistsInRegistry(this, 'harbor.h2o.ai', "opsh2oai", "h2o-3/${image}", "${previousVersion}")) {
        retryWithDelay(3 /* retries */, 120 /* delay in sec */) {
            sh "docker pull ${IMAGE_NAME_PREFIX}/${image}:${previousVersion}"
        }
    }
}
