import org.gradle.api.internal.DefaultDomainObjectSet

rootProject.name = 'h2o-3'

include 'h2o-core'
include 'h2o-test-support'
include 'h2o-algos'
include 'h2o-web'
include 'h2o-app'
include 'h2o-r'
include 'h2o-py'
include 'h2o-py-cloud-extensions'
include 'h2o-assemblies:main'
include 'h2o-assemblies:minimal'
include 'h2o-assemblies:steam'
include 'h2o-assemblies:genmodel'
include 'h2o-persist-gcs'
include 'h2o-persist-hdfs'
include 'h2o-persist-s3'
include 'h2o-persist-http'
include 'h2o-docs'
include 'h2o-hadoop-common'
include 'h2o-mapreduce-generic'
include 'h2o-hive'
include 'h2o-genmodel'
include 'h2o-bindings'
include 'h2o-test-accuracy'
include 'h2o-avro-parser'
include 'h2o-orc-parser'
include 'h2o-parquet-parser'
include 'h2o-parquet-parser-tests'
include 'h2o-parquet-v17-compat'
include 'h2o-jaas-pam'
include 'h2o-automl'
include 'h2o-admissibleml'
include 'h2o-genmodel-ext-xgboost'
include 'h2o-ext-xgboost'
include 'h2o-ext-krbstandalone'
include 'h2o-ext-steam'
include 'h2o-ext-example'
include 'h2o-webserver-iface'
include 'h2o-jetty-8'
include 'h2o-jetty-9'
include 'h2o-jetty-9-ext'
include 'h2o-jetty-9-minimal'
include 'h2o-ext-jython-cfunc'
include 'h2o-ext-mojo-pipeline'
include 'h2o-genmodel-ext-mojo-pipeline'
include 'h2o-ext-target-encoder'
include 'h2o-security'
include 'h2o-logger'
include 'h2o-genmodel-ext-jgrapht'
include 'h2o-k8s'
include 'h2o-k8s-int'
include 'h2o-genmodel-ext-deepwater'
include 'h2o-clustering'
include 'h2o-logging-impl-classic'
include 'h2o-logging-impl-log4j2'
include 'h2o-logging-safe4j'
include 'h2o-k8s-comp'

// Make structure flat and avoid annoying dummy modules
rootProject.children.each { project ->
  if (project.name.startsWith("h2o-") && (project.name.endsWith("-parser") || project.name.endsWith("-tests"))) {
    String projectDirName = "h2o-parsers/${project.name}"
    project.projectDir = new File(settingsDir, projectDirName)
  }
  // Parser Compatibility Testing
  if (project.name.startsWith("h2o-") && project.name.endsWith("-compat")) {
    String projectDirName = "h2o-parsers/" + project.name.replaceFirst("-v[0-9]+-", "-") + "/" + project.name
    project.projectDir = new File(settingsDir, projectDirName)
  }
  if (project.name.startsWith("h2o-ext-")) {
    String projectDirName = "h2o-extensions/${project.name - 'h2o-ext-'}"
    project.projectDir = new File(settingsDir, projectDirName)
  }
  if (project.name.startsWith("h2o-genmodel-ext-")) {
    String projectDirName = "h2o-genmodel-extensions/${project.name - 'h2o-genmodel-ext-'}"
    project.projectDir = new File(settingsDir, projectDirName)
  }
  if (project.name.startsWith("h2o-logging-")) {
    String projectDirName = "h2o-logging/${project.name - 'h2o-logging-'}"
    project.projectDir = new File(settingsDir, projectDirName)
  }
}

//
// Include Hadoop builds only if requested
//
if (System.getProperty("user.name").equals("jenkins")
        || System.getenv("BUILD_HADOOP") != null
        || System.getenv("H2O_TARGET") != null
        || hadoopTargets) {
  // check if a filter prop or env var is defined
  def targetsFilter
  if (System.getenv("H2O_TARGET") != null) {
    // env can override gradle property
    targetsFilter = System.getenv("H2O_TARGET")
  } else if (hadoopTargets) {
    targetsFilter = hadoopTargets
  }
  // Compute targets
  def targets
  if (targetsFilter) {
    targets = targetsFilter.split(",").collect { it.trim() }
  } else {
    targets = [ // build all
            "cdh5.4", "cdh5.5", "cdh5.6", "cdh5.7", "cdh5.8", "cdh5.9", "cdh5.10", "cdh5.13", "cdh5.14", "cdh5.15", "cdh5.16",
            "cdh6.0", "cdh6.1", "cdh6.2", "cdh6.3", "cdp7.0", "cdp7.1", "cdp7.2",
            "hdp2.2", "hdp2.3", "hdp2.4", "hdp2.5", "hdp2.6","hdp3.0","hdp3.1",
            "mapr4.0", "mapr5.0", "mapr5.1", "mapr5.2", "mapr6.0", "mapr6.1", "mapr6.2", "mapr7.0", "iop4.2", "emr6.10"
    ]
  }
  logger.debug("Building hadoops " + targets)
  // Include selected/all Hadoop targets
  if (System.getenv("BUILD_HADOOP") != "false") {
    targets.each { name ->
      include "h2o-hadoop-2:h2o-${name}-assembly"
      include "h2o-hadoop-3:h2o-${name}-assembly"
    }
  }
} else {
  logger.debug("Not building hadoop jars")
}
