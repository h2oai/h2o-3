description = "H2O Python Package"

dependencies {
    api project(path: ":h2o-assemblies:${mainAssemblyName}", configuration: 'shadow')
}

def buildVersion = new H2OBuildVersion(rootDir, version)

ext {
    PROJECT_VERSION = buildVersion.getProjectVersion()
    pythonexe = findProperty("pythonExec") ?: "python"
    pipexe = findProperty("pipExec") ?: "pip"
    if (System.env.VIRTUAL_ENV) {
        pythonexe = "${System.env.VIRTUAL_ENV}/bin/python".toString()
        pipexe = "${System.env.VIRTUAL_ENV}/bin/pip".toString()
    }
    testsPath = file("tests")
}

//
// Create a file with version for Python dist task
//
task createVersionFiles() {
    doLast {
        ["main", "client"].each {
            file("${buildDir}/$it/h2o/").mkdirs()
            File version_file = new File("${buildDir}/$it/h2o", "version.txt")
            version_file.write(PROJECT_VERSION)

            File build_file = new File("${buildDir}/$it/h2o", "buildinfo.txt")
            build_file.write(buildVersion.toString())
        }
    }
}

task verifyDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine([
            pythonexe, "scripts/verify_requirements.py",
            "--metayaml", "conda/h2o-main/meta.yaml",
            "--kind", "build"
    ])
}

task verifyTestDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine([
            pythonexe, "scripts/verify_requirements.py",
            "--metayaml", "conda/h2o-main/meta.yaml",
            "--kind", "test"
    ])
}

task copyH2OJar(type: Copy, dependsOn: [configurations.compileClasspath]) {
    from "${rootDir}/build/h2o.jar"
    rename { filename ->
        return 'h2o.jar'
    }
    into "${buildDir}/main/h2o/backend/bin/"
}

task copyH2OClientJar(type: Copy, dependsOn: [jar]) {
    from("${buildDir}/libs/h2o-py.jar") {
        rename("h2o-py.jar", "h2o.jar")
    }
    into "${buildDir}/client/h2o/backend/bin/"
}

task copySrcFiles(type: Copy, dependsOn: [copyH2OJar]) {
    from ("${projectDir}") {
        include "setup.py"
        include "setup.cfg"
        include "h2o/**"
        include "DESCRIPTION.rst"
        include "MANIFEST.in"
        include "README.md"
        include "requirements.txt"
    }
    into "${buildDir}/main"
}

task copyClientSrcFiles(type: Copy, dependsOn: [copyH2OClientJar]) {
    from ("${projectDir}") {
        include "setup.py"
        include "setup.cfg"
        include "h2o/**"
        include "DESCRIPTION.rst"
        include "MANIFEST.in"
        include "README.md"
        include "requirements.txt"
    }
    into "${buildDir}/client"
}

task buildDist(type: Exec, dependsOn: [verifyDependencies, createVersionFiles, copySrcFiles]) {
    workingDir new File(buildDir, "main")
    doFirst {
        file("${buildDir}/main/tmp").mkdirs()
        standardOutput = new FileOutputStream(file("${buildDir}/main/tmp/h2o-py_buildDist.out"))
    }
    commandLine getOsSpecificCommandLine([pythonexe, "setup.py", "bdist_wheel"])
}

// I don't know why the task with type: Copy doesn't run after buildDist for gradle 8 even though its working for other projects (e.g. h2o-py-cloud-extension)
// I was able to properly copy the wheel only this way.
task copyMainDist(dependsOn: [buildDist]) {
    doLast{
        copy {
            from("${buildDir}/main/") {
                include "dist/**"
            }
            into "${buildDir}"
        }
    }
}

task buildClientDist(type: Exec, dependsOn: [verifyDependencies, createVersionFiles, copyClientSrcFiles]) {
    workingDir new File(buildDir, "client")
    doFirst {
        file("${buildDir}/client/tmp").mkdirs()
        standardOutput = new FileOutputStream(file("${buildDir}/client/tmp/h2o-py_buildDist.out"))
    }
    commandLine getOsSpecificCommandLine([pythonexe, "setup.py", "bdist_wheel", "--client"])
}

task smokeTest(type: Exec, dependsOn: [verifyTestDependencies]) {
    workingDir testsPath
    List<String> args = [pythonexe, '../../scripts/run.py', '--wipeall', '--testsize', 's']
    if (project.hasProperty("jacocoCoverage")) {
        args << '--jacoco'
    }
    commandLine getOsSpecificCommandLine(args)
}

task pythonVersion(type: Exec) {
    doFirst {
        println(System.env.VIRTUAL_ENV)
        println(environment)
    }
    commandLine getOsSpecificCommandLine([pythonexe, "--version"])
}


task cleanUpTestResults(type: Delete) {
    delete file("${testsPath}/results")
    doLast {
        mkdir file("${testsPath}/results")
    }
}

task cleanCoverageData(type: Delete) {
    delete file("${testsPath}/results/jacoco")
}

task cleanBuild(type: Delete) {
    doFirst {
        println "Cleaning..."
    }
    delete file("build/")
    delete fileTree(dir: "$projectDir/h2o" , include: '**/*.pyc')
}

//
// Define the dependencies
//
clean.dependsOn cleanBuild, cleanUpTestResults, cleanCoverageData
buildDist.dependsOn buildClientDist // to have a predictable order of these 2 
copyH2OJar.dependsOn ":h2o-assemblies:${mainAssemblyName}:copyJar"
build.dependsOn copyMainDist
