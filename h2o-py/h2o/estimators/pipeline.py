#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# This file is auto-generated by h2o-3/h2o-bindings/bin/gen_python.py
# Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)
#

import h2o
from h2o.display import H2ODisplay, repr_def
from h2o.expr import ASTId, ExprNode
from h2o.schemas import H2OSchema, register_schema_handler
from h2o.estimators.estimator_base import H2OEstimator
from h2o.exceptions import H2OValueError
from h2o.frame import H2OFrame
from h2o.utils.typechecks import assert_is_type, Enum, numeric


class H2OPipeline(H2OEstimator):
    """
    Pipeline

    """

    algo = "pipeline"
    supervised_learning = None

    def __init__(self,
                 model_id=None,  # type: Optional[Union[None, str, H2OEstimator]]
                 ):
        """
        :param model_id: Destination id for this model; auto-generated if not specified.
               Defaults to ``None``.
        :type model_id: Union[None, str, H2OEstimator], optional
        """
        super(H2OPipeline, self).__init__()
        self._parms = {}
        self._id = self._parms['model_id'] = model_id

    @property
    def transformers(self):
        return self._model_json['output']['transformers']

    @property
    def estimator_model(self):
        m_json = self._model_json['output']['estimator']
        return None if (m_json is None or m_json['name'] is None) else h2o.get_model(m_json['name'])

    def transform(self, fr):
        """
        Applies all the pipeline transformers to the given input frame.
        :return: the transformed frame, as it would be passed to `estimator_model`, if calling `predict` instead.
        """
        return H2OFrame._expr(expr=ExprNode("transform", ASTId(self.key), ASTId(fr.key)))._frame(fill_cache=True)


class H2ODataTransformer(H2ODisplay):
    @classmethod
    def make(cls, kvs):
        dt = H2ODataTransformer(**{k: v for k, v in kvs if k not in H2OSchema._ignored_schema_keys_})
        dt._json = kvs
        return dt

    def __init__(self, id=None, description=None):
        self._json = None
        self.id = id
        self.description = description

    def _repr_(self):
        return repr(self._json)

    def _str_(self, verbosity=None):
        return repr_def(self)


# self-register transformer class: done as soon as `h2o.estimators` is loaded, which means as soon as h2o.h2o is...
register_schema_handler("DataTransformerV3", H2ODataTransformer)

