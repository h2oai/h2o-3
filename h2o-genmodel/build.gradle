//
// H2O Generated Model Support Module
//
description = "H2O GenModel"

// MOJO has to stay Java 1.7 compatible! 
sourceCompatibility = 1.7
targetCompatibility = 1.7

apply from: "$rootDir/gradle/dataCheck.gradle"

javadoc {
  options.overview = "src/main/java/overview.html" // relative to source root

  doLast {
     copy {
       from "src/main/java/doc-files"
       into "$buildDir/docs/javadoc/doc-files"
     }
  }
}

//
// This project has intentionally no dependencies
// DO NOT ADD ANY DEPENDENCIES ON h2o-* projects
//

dependencies {
  api project(":h2o-logger")
  // genmodel specific dependencies
  api "net.sf.opencsv:opencsv:2.3"
  api "ai.h2o:h2o-tree-api:0.3.17"
  // dependencies that are shared with h2o-core - always use the same version as h2o-core
  api "com.google.code.gson:gson:${gsonVersion}"
  api "no.priv.garshol.duke:duke:1.2"
  api "commons-lang:commons-lang:2.6"
  api "joda-time:joda-time:2.10.13"
  // test only
  testImplementation "com.google.guava:guava:16.0.1"
  testImplementation 'org.mockito:mockito-core:2.18.3'
  testImplementation "junit:junit:${junitVersion}"
}

def buildVersionFile = new File(projectDir, "/src/main/java/water/genmodel/BuildVersion.java")
// this is where the "buildVersionFile" used to be before we fixed it (it was causing classpath clash)
def oldBuildVersionFile = new File(projectDir, "/src/main/java/water/init/BuildVersion.java")

task generateBuildVersionJava {
  doLast {
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version, "water.genmodel")
    bv.emitBuildVersionJavaFileIfNecessary(buildVersionFile)
  }
}

task cleanBuildVersionJava(type: Delete) {
  delete buildVersionFile
}

task cleanDeprecatedBuildVersionJava(type: Delete) {
  delete oldBuildVersionFile
}

compileJava.dependsOn cleanDeprecatedBuildVersionJava, generateBuildVersionJava

clean.dependsOn cleanBuildVersionJava, cleanDeprecatedBuildVersionJava
