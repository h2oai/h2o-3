//
// Micro benchmark support
//

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.5.2'
    }
}

apply plugin: 'me.champeau.gradle.jmh' // This plugin is not compatible with Gradle 8, upgrade to Gradle 8 friendly
                                       // version of the plugin should help in the future
apply plugin: "com.github.johnrengelman.shadow"


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import water.build.tasks.S3UploadTask


ext {
    H2OBuildVersion bv = new H2OBuildVersion(rootDir, version)
    String date = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("UTC"))

    // Environment for the run
    jmhRunDate = date
    jmhRunSha = bv.getLastCommitHash()
    jmhResultFileName = "${bv.getLastCommitHash()}-${date}.csv"
    jmhResultFile = project.file("${project.buildDir}/reports/jmh/$jmhResultFileName")
    jmhVersion = '1.23'

    // ubench - post-processed output
    ubenchResultFile = project.file("${project.buildDir}/reports/ubench/$jmhResultFileName")
}

// Setup JMH
jmh {
    //
    // Include only selected tests for benchmarking
    if (project.hasProperty('ubenchIncludeOnly')) {
        include = project.ubenchIncludeOnly
    }
    jmhVersion = project.jmhVersion
    resultsFile = project.jmhResultFile
    duplicateClassesStrategy = 'warn'
    resultFormat = 'CSV'
    //
    // Attach different profilers (gc, stack summary, ...)
    // See: http://java-performance.info/introduction-jmh-profilers/
    //profilers = ['stack'] // ['hs_comp']
}

dependencies {
    jmh group: 'commons-io' , name: 'commons-io', version: '2.4'
    api group: 'org.openjdk.jmh', name:'jmh-core', version: project.jmhVersion
    api group: 'org.openjdk.jmh', name:'jmh-generator-annprocess', version: project.jmhVersion
}

task jmhPostProcess(dependsOn: "jmh") {
    doFirst {
        project.ubenchResultFile.getParentFile().mkdirs()
    }
    doLast {
        def results = project.jmhResultFile.readLines()
        def header = "\"SHA\",\"Date\"," + results.head()
        def data = results.tail().collect { "\"${project.jmhRunSha}\",\"${project.jmhRunDate}\",$it" }
        project.ubenchResultFile.withWriter{ out ->
            out.println header
            data.each { out.println it }
        }
        logger.error("Ubench reported in ${project.ubenchResultFile}")
    }
}

task jmhFatJar(type: ShadowJar) {
    archiveClassifier.set('jmh')
    manifest {
        attributes "Main-Class": "org.openjdk.jmh.Main"
    }
    configurations = [project.configurations.runtimeOnly, project.configurations.jmh]
    from sourceSets.main.output
    from sourceSets.jmh.output
    from tasks.jmhRunBytecodeGenerator.outputs
    from tasks.jmhCompileGeneratedClasses.outputs
    dependsOn(tasks.jmhCompileGeneratedClasses)
}


task uploadResultsToS3(type: S3UploadTask) {
    bucket = "ai.h2o.ubench"
    objectName = "${project.name}/$jmhResultFileName"
    file = ubenchResultFile
    enabled = project.hasProperty("doUploadUBenchResults") && project.doUploadUBenchResults == "true"
}

task ubench
ubench.dependsOn jmhPostProcess
ubench.dependsOn uploadResultsToS3
uploadResultsToS3.shouldRunAfter("jmhPostProcess")
