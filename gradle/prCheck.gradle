//
// Validate Pull Request metadata
//

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.ricksbrown:cowsay:1.1.0'
    }
}

import groovy.json.JsonSlurper
import com.github.ricksbrown.cowsay.Cowsay

def GOOD_PR_PROCESS = """
How to pass this check?
    1. Always have a GitHub issue before you start working on a task (otherwise you cannot know what branch to start from).
    2. Make sure the GitHub issue has a milestone assigned. If it doesn't consult the team what is a good fix version for your change.
    3. If you are working on a GitHub issue with the milestone ending with '.1' you are working on a change that should go to a master branch. 
       All other changes should go to the (current) fix release branch. Such branches are prefixed 'rel-'. 
    4. Assign the issue to H2O-3 project and Put issue in the project to 'In Progress' state.
    6. Make a code change. Include GitHub issue number (GH-XXXX) in the commit message of one of your commits. This is not checked. 
    7. Submit a PR and issue number in PR's title and link the issue in the PR description, eg.: GH-4200: Adding support for Factorization Machines. This is checked.
"""

task checkPullRequest {
    group = "Validation"
    description = "Validates that PR has the right metadata in the title and is created against the correct branch"
    doLast {
        def errors = checkPull(System.getenv("CHANGE_ID"))
        def allGood = errors.isEmpty()
        def message = allGood ? "No issues found! Thank you for being awesome" : "Baa! Your PR isn't quite right"
        def animal = allGood ? "cow" : "sheep" // as in "black sheep"
        new File(project.buildDir, "prCheckReport.log").withWriter {w ->
            def cowargs = ["-f", animal, message] as String[]
            w.println(Cowsay.say(cowargs))
            errors.forEach { e -> w.println("==>> $e") }
            w.println()
            w.println(GOOD_PR_PROCESS)
        }
        if (!errors.isEmpty()) {
            throw new GradleException(errors[0])
        }
    }
}

def checkPull(changeId) {
    def jsonSlurper = new JsonSlurper()
    def pullDetails = jsonSlurper.parseText(new URL("https://api.github.com/repos/h2oai/h2o-3/pulls/$changeId").getText())
    def title = pullDetails.title
    println ""
    println "Checking pull request ($changeId): $title"
    println ""
    if (title.contains("[nocheck]")) {
        println "PR check will be skipped due to user request"
        return []
    }
    if (title.contains("[Snyk]")) {
        println "PR check will be skipped for Snyk security upgrades"
        return []
    }
    def issueMatcher = title =~ /.*GH-([0-9]{4,5}).*/
    if (!issueMatcher.matches()) {
        return ["Pull Request ${changeId} doesn't have associated GitHub issue. Please add the issue number (GH-XXXX) in the title of the PR"]
    }
    def issueId = issueMatcher[0][1]
    
    def errorMessages = []
    if (!pullDetails.body.contains("#${issueId}")) {
        errorMessages.add("The associated GitHub issue #${issueId} must be mentioned in the description of the PR.")
    } 
        
    def issueDetails = jsonSlurper.parseText(new URL("https://api.github.com/repos/h2oai/h2o-3/issues/${issueId}").getText())
    
    if (issueDetails.milestone == null || issueDetails.milestone.state != "open"){
        errorMessages.add("The associated GitHub issue #${issueId} must be assigned to an opened milestone.")
    } else {
        def fixVersionValue = issueDetails.milestone.title
        def baseBranch = pullDetails.base.ref
        if (fixVersionValue.endsWith('.1')) {
            if (baseBranch != 'master')
                errorMessages.add("Pull Request ${changeId} is linked to the GitHub issue https://github.com/h2oai/h2o-3/issues/${issueId}. " +
                        "This issue is marked for release in {$fixVersionValue}. This release will be done from a master branch. Change the base branch of the PR to 'master'.")
        } else {
            if (!baseBranch.startsWith('rel-')) {
                errorMessages.add("Pull Request ${changeId} is linked to the GitHub issue https://github.com/h2oai/h2o-3/issues/${issueId}. " +
                        "This issue is marked for release in {$fixVersionValue}. This release will be done from a fix release branch. Change the base branch to a correspond to the right fix release branch.")
            }
        }
    }
    if (issueDetails.assignee == null){
        errorMessages.add("The associated GitHub issue #${issueId} must have an assignee.")
    }
    
    def projectRequest = '{"query":"{ repository(owner: \\"h2oai\\", name: \\"h2o-3\\") {issue(number: ' + "${issueId}" + ') {projectV2(number: 112){number}}}}"}'
    def projectRequestUrl = new URL("https://api.github.com/graphql")
    def connection = (HttpURLConnection)projectRequestUrl.openConnection()
    connection.setRequestMethod("POST")
    connection.setDoOutput(true)
    connection.setRequestProperty("Authorization", "Bearer ${System.getenv("H2O3_GET_PROJECT_TOKEN")}")
    connection.connect()
    try(OutputStream os = connection.getOutputStream()) {
        os.write(projectRequest.getBytes());
    }
    try(InputStream is = connection.getInputStream()) {
        def responseText = is.getText()
        def projectResponse = jsonSlurper.parseText(responseText)
        if (projectResponse.data.repository.issue.projectV2 == null) {
            errorMessages.add("The associated GitHub issue #${issueId} must be assigned to H2O-3 project.")
        }
    }
    
    if (errorMessages.isEmpty()) {
        println "Pull request #$changeId seems correct. Thank you and good luck in code review!"
    }
    return errorMessages
}
