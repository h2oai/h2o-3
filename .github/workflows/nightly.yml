name: H2O-3 Nightly CI

on:
  workflow_dispatch:
  push:
    branches:
      - devops/rohan/mig-h2o-3-nightly-pipeline-to-gha

permissions:
  id-token: write
  contents: read

env:
  BRANCH_NAME: devops/rohan/mig-h2o-3-nightly-pipeline-to-gha
  DOCKER_IMAGE: 353750902984.dkr.ecr.us-east-1.amazonaws.com/h2o-3/dev-build-base:46
  AWS_REGION: us-east-1
  MODE: MODE_NIGHTLY

jobs:
  checkout-and-prepare:
    name: Checkout and Prepare Workspace
    runs-on: ubuntu-latest
    outputs:
      gradle_version: ${{ steps.extract.outputs.gradle_version }}
      xgb_version: ${{ steps.extract.outputs.xgb_version }}
      build_status: ${{ steps.health_check.outputs.result }}

    steps:
      - name: Checkout H2O-3
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: "h2o-ecr"
          role-to-assume: "arn:aws:iam::353750902984:role/GitHub-OIDC-Role"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin 353750902984.dkr.ecr.us-east-1.amazonaws.com

      - name: Pull Docker Image
        run: docker pull ${{ env.DOCKER_IMAGE }}

      - name: Make pipeline scripts executable
        run: chmod +x scripts/github/*.sh

      - name: Extract Gradle and XGBoost versions
        id: extract
        shell: bash
        run: |
          GRADLE_VERSION=$(grep distributionUrl gradle/wrapper/gradle-wrapper.properties | sed -n 's/.*gradle-\([0-9.]*\)-bin.zip.*/\1/p')
          XGB_VERSION=$(grep 'xgboost4jVersion' h2o-extensions/xgboost/build.gradle | sed -n 's/.*xgboost4jVersion *= *[\"\x27]*\([0-9.]*\).*/\1/p')
          echo "gradle_version=${GRADLE_VERSION:-not_found}" >> "${GITHUB_OUTPUT}"
          echo "xgb_version=${XGB_VERSION:-not_found}" >> "${GITHUB_OUTPUT}"

      - name: Retry Health Check
        id: health_check
        run: |
          for i in {1..3}; do
            echo "Health check attempt $i"
            if ./scripts/github/init_pipeline.sh "$MODE" && ./scripts/github/health_check.sh; then
              echo "result=success" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            sleep 10
          done
          echo "result=failure" >> "$GITHUB_OUTPUT"
          exit 1

      - name: Archive workspace safely
        if: steps.health_check.outputs.result == 'success'
        shell: bash
        run: |
          mkdir temp-archive
          shopt -s extglob dotglob
          cp -a !(temp-archive) temp-archive/
          tar -czf workspace.tar.gz -C temp-archive .

      - name: Upload workspace artifact
        if: steps.health_check.outputs.result == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: workspace.tar.gz

  build-h2o3:
    name: Build H2O-3
    runs-on: ubuntu-22.04-4x
    needs: checkout-and-prepare
    if: needs.checkout-and-prepare.outputs.build_status == 'success'

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: Extract workspace
        run: tar -xzf workspace.tar.gz

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: "h2o-shared-service-prod"
          role-to-assume: "arn:aws:iam::851725263148:role/GitHub-OIDC-Role"

      - name: Sync smalldata from S3
        run: |
          mkdir -p smalldata
          aws s3 sync s3://h2o-public-test-data/smalldata/ ./smalldata/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: "h2o-ecr"
          role-to-assume: "arn:aws:iam::353750902984:role/GitHub-OIDC-Role"

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin 353750902984.dkr.ecr.us-east-1.amazonaws.com

      - name: Run Build in Docker
        env:
          DRIVERLESS_AI_LICENSE_KEY: ${{ secrets.DRIVERLESS_AI_LICENSE_KEY }}
        run: |
          docker run --rm -u 0:0 -v ${{ github.workspace }}:/ws -w /ws \
            -e DRIVERLESS_AI_LICENSE_KEY=${{ secrets.DRIVERLESS_AI_LICENSE_KEY }} \
            ${{ env.DOCKER_IMAGE }} \
            bash -c "
              apt-get update && apt-get install -y python3 python3-pip &&
              ln -sf /usr/bin/python3 /usr/bin/python || true &&
              python3 -m pip install --upgrade pip &&
              pip install --no-cache-dir 'tabulate>=0.7.5' 'requests>=2.10' &&
              git config --global --add safe.directory '*' &&
              ./gradlew --build-cache --parallel build \
                -x test \
                -x :h2o-r:buildPackageDocumentation \
                -x :h2o-r:buildPKG \
                -x :h2o-r:buildPKGClient \
                -x :h2o-r:untar \
                --warning-mode all
            "

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: build-h2o3

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: Extract workspace
        run: tar -xzf workspace.tar.gz

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: "h2o-ecr"
          role-to-assume: "arn:aws:iam::353750902984:role/GitHub-OIDC-Role"

      - name: Run Python tests inside Docker
        env:
          DRIVERLESS_AI_LICENSE_KEY: ${{ secrets.DRIVERLESS_AI_LICENSE_KEY }}
        run: |
          docker run --rm -u 0:0 -v ${{ github.workspace }}:/ws -w /ws \
            -e DRIVERLESS_AI_LICENSE_KEY=${{ secrets.DRIVERLESS_AI_LICENSE_KEY }} \
            ${{ env.DOCKER_IMAGE }} \
            bash -c "make -f scripts/jenkins/Makefile.jenkins pyunit-smoke"

  r-tests:
    name: R Tests
    runs-on: ubuntu-latest
    needs: build-h2o3

    steps:
      - name: Download workspace
        uses: actions/download-artifact@v4
        with:
          name: workspace

      - name: Extract workspace
        run: tar -xzf workspace.tar.gz

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: "sts.amazonaws.com"
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: "h2o-ecr"
          role-to-assume: "arn:aws:iam::353750902984:role/GitHub-OIDC-Role"

      - name: Run R tests inside Docker
        env:
          DRIVERLESS_AI_LICENSE_KEY: ${{ secrets.DRIVERLESS_AI_LICENSE_KEY }}
        run: |
          docker run --rm -u 0:0 -v ${{ github.workspace }}:/ws -w /ws \
            -e DRIVERLESS_AI_LICENSE_KEY=${{ secrets.DRIVERLESS_AI_LICENSE_KEY }} \
            ${{ env.DOCKER_IMAGE }} \
            bash -c "make -f scripts/jenkins/Makefile.jenkins runit-smoke"
