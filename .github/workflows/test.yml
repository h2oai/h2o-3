name: H2O-3 Nightly Tests

on:
  workflow_dispatch:
  push:
    branches:
      - devops/rohan/mig-h2o-3-nightly-pipeline-to-gha

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1

jobs:
  build-h2o-3:
    runs-on: ubuntu-latest-16-cores
    timeout-minutes: 100
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Install Python build tools
        run: python -m pip install --upgrade pip wheel grip tabulate requests

      - name: Set up R 4.2.2
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 4.2.2

      - name: Install R system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libfontconfig1-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libfreetype6-dev \
            libtiff5-dev \
            libjpeg-dev \
            libpng-dev \
            r-base \
            r-cran-xml2

      - name: Install core R packages for documentation
        run: |
          Rscript -e 'install.packages(c("RCurl", "jsonlite", "statmod", "devtools", "roxygen2", "testthat", "Rcpp"), dependencies=TRUE, repos="http://cran.rstudio.com/")'

      - name: Install extended R packages
        run: |
          Rscript -e 'install.packages(c("ggplot2", "mlbench", "slam", "bit64", "data.table", "rgl", "plot3Drgl", "IRdisplay", "plotly", "repr"), dependencies=TRUE, repos="http://cran.rstudio.com/")'

      - name: Gradle build with uBench enabled
        run: |
          chmod +x gradlew
          ./gradlew --no-daemon --build-cache --parallel \
            -x test \
            build --stacktrace --warning-mode all

      - name: Prepare test-package-js.zip
        run: make -f scripts/jenkins/Makefile.jenkins test-package-js

      - name: Prepare test-package-java.zip
        run: make -f scripts/jenkins/Makefile.jenkins test-package-java

      - name: Prepare test-package-r.zip
        run: make -f scripts/jenkins/Makefile.jenkins test-package-r

      - name: Upload test-package-js.zip
        uses: actions/upload-artifact@v4
        with:
          name: test-package-js
          path: test-package-js.zip
          retention-days: 3

      - name: Upload test-package-r.zip
        uses: actions/upload-artifact@v4
        with:
          name: test-package-r
          path: test-package-r.zip
          retention-days: 3

      - name: Upload test-package-java.zip
        uses: actions/upload-artifact@v4
        with:
          name: test-package-java
          path: test-package-java.zip
          retention-days: 3

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: h2o-3-build
          path: |
            h2o-3/h2o-py/build/dist/*.whl
            h2o-3/build/h2o.jar
            h2o-3/h2o-assemblies/minimal/build/libs/minimal.jar
            h2o-3/h2o-assemblies/steam/build/libs/steam.jar
            h2o-3/h2o-assemblies/main/build/libs/main.jar
          if-no-files-found: error
          retention-days: 1
      
  test-python-38:
    needs: build-h2o-3
    runs-on: ubuntu-latest-16-cores
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: python-3-8-single-node
            make_target: test-pyunit-single-node
          - label: python-3-8-xgboost-stress
            make_target: test-pyunit-xgboost-stress
          - label: python-3-8-automl-noxgb
            make_target: test-pyunit-automl-smoke-noxgb
          - label: python-3-8-automl
            make_target: test-pyunit-automl
          - label: python-3-8-fault-tolerance
            make_target: test-pyunit-fault-tolerance
          - label: python-3-8-medium-large
            make_target: test-pyunit-medium-large
          - label: python-3-8-pyunit-xlarge
            make_target: test-pyunit-xlarge
          - label: python-3-8-pyunit-mojo2
            make_target: test-pyunit-mojo2
          - label: python-3-8-pyunit-explain
            make_target: test-pyunit-explain
          - label: python-3-8-pyunit-demos
            make_target: test-pyunit-demos
          - label: python-3-8-demos-new-scikit
            make_target: test-py-demos-new-scikit
          - label: python-3-8-py-persist-s3
            make_target: test-py-persist-s3
          - label: python-3-8-pyunit-small
            make_target: test-pyunit-small
          - label: python-3-8-py-smoke
            make_target: test-py-smoke
          - label: python-3-8-py-smoke-main
            make_target: test-py-smoke-main
          - label: python-3-8-py-smoke-minimal
            make_target: test-py-smoke-minimal
          - label: python-3-8-py-smoke-steam
            make_target: test-py-smoke-steam

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: 3.8
          auto-activate-base: false
          auto-update-conda: false
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Install system libraries
        run: |
          sudo apt-get update -q
          sudo apt-get install -y libkrb5-dev gcc g++ python3-dev
      - name: Cache conda environment
        uses: actions/cache@v3
        with:
          path: ~/miniconda/envs/py38env
          key: ${{ runner.os }}-conda-py38-${{ matrix.make_target }}
          restore-keys: |
            ${{ runner.os }}-conda-py38-
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: h2o-3-build
          path: artifacts

      - name: Clone H2O-3 source
        run: git clone --depth 1 https://github.com/h2oai/h2o-3.git h2o-3-src

      - name: Create conda env
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          if ! conda env list | grep -q "^py38env"; then
            conda create -y -n py38env python=3.8 pip
          fi
      - name: Restore smalldata
        uses: actions/cache@v4
        with:
          path: smalldata
          key: smalldata-v1

      - name: Restore bigdata
        uses: actions/cache@v4
        with:
          path: bigdata
          key: bigdata-v1

      - name: Link smalldata and bigdata
        run: |
          ln -s -f smalldata/ smalldata
          ln -s -f bigdata/ bigdata
      - name: Install Python deps & H2O wheel (in py38env)
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate py38env
          pip install -r h2o-py/ci-test-requirements-py38.txt
          pip install --upgrade pip wheel grip tabulate requests
          pip install "$(find artifacts -name '*.whl' | head -n 1)"
      - name: Copy build outputs into source tree
        run: |
          mkdir -p h2o-3-src/build
          mkdir -p h2o-3-src/h2o-assemblies/minimal/build/libs
          mkdir -p h2o-3-src/h2o-assemblies/steam/build/libs
          mkdir -p h2o-3-src/h2o-assemblies/main/build/libs
          cp "$(find artifacts -name h2o.jar | head -n1)" h2o-3-src/build/h2o.jar
          cp "$(find artifacts -name minimal.jar | head -n1)" h2o-3-src/h2o-assemblies/minimal/build/libs/minimal.jar
          cp "$(find artifacts -name steam.jar | head -n1)" h2o-3-src/h2o-assemblies/steam/build/libs/steam.jar
          cp "$(find artifacts -name main.jar | head -n1)" h2o-3-src/h2o-assemblies/main/build/libs/main.jar
      - name: Run ${{ matrix.label }} test and save output
        shell: bash -l {0}
        working-directory: h2o-3-src
        continue-on-error: true
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate py38env
          set -o pipefail
          make -f scripts/jenkins/Makefile.jenkins ${{ matrix.make_target }} 2>&1 | tee full_output.log
          echo "${PIPESTATUS[0]}" > test_exit_code.txt
      - name: Extract section from 'Starting clouds' to end of file
        working-directory: h2o-3-src
        run: |
          RESULTS_FILE="full_output.log"
          if [[ -f "$RESULTS_FILE" ]]; then
            START_LINE=$(grep -n "^Starting clouds\.\.\." "$RESULTS_FILE" | cut -d: -f1 | head -n 1)
            if [[ -n "$START_LINE" ]]; then
              tail -n +"$START_LINE" "$RESULTS_FILE" > summary.txt
            else
              echo "Could not find 'Starting clouds...'. Dumping full log." > summary.txt
              cat "$RESULTS_FILE" >> summary.txt
            fi
          else
            echo "No result file found." > summary.txt
          fi
      - name: Upload test summary and log
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.label }}
          path: |
            h2o-3-src/summary.txt
          if-no-files-found: error
          retention-days: 3

      - name: Fail if test step failed
        shell: bash -l {0}
        working-directory: h2o-3-src
        run: |
          if [[ ! -f test_exit_code.txt ]]; then
            echo "Missing test_exit_code.txt! Marking as failed."
            exit 1
          fi
          EXIT_CODE=$(cat test_exit_code.txt)
          if [[ "$EXIT_CODE" -ne 0 ]]; then
            echo "Test failed. Failing the job now."
            exit $EXIT_CODE
          else
            echo "Test passed."
          fi
          
  test-python-311:
    needs: build-h2o-3
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: python-3-11-single-node
            make_target: test-pyunit-single-node
          - label: python-3-11-fault-tolerance
            make_target: test-pyunit-fault-tolerance
          - label: python-3-11-py-smoke
            make_target: test-py-smoke

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: 3.11
          auto-activate-base: false
          auto-update-conda: false
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Install system libraries
        run: |
          sudo apt-get update -q
          sudo apt-get install -y libkrb5-dev gcc g++ python3-dev
          
      - name: Cache conda environment
        uses: actions/cache@v3
        with:
          path: ~/miniconda/envs/py38env
          key: ${{ runner.os }}-conda-py311-${{ matrix.make_target }}
          restore-keys: |
            ${{ runner.os }}-conda-py311-
            
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: h2o-3-build
          path: artifacts

      - name: Clone H2O-3 source
        run: git clone --depth 1 https://github.com/h2oai/h2o-3.git h2o-3-src

      - name: Create conda env
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          if ! conda env list | grep -q "^py311env"; then
            conda create -y -n py311env python=3.11 pip
          fi
          
      - name: Install Python deps & H2O wheel (in py38env)
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate py311env
          pip install -r h2o-py/ci-test-requirements-py311.txt
          pip install --upgrade pip wheel grip tabulate requests
          pip install "$(find artifacts -name '*.whl' | head -n 1)"
          
      - name: Restore smalldata
        uses: actions/cache@v4
        with:
          path: smalldata
          key: smalldata-v1

      - name: Link smalldata and bigdata
        run: |
          ln -s -f smalldata/ smalldata
          
      - name: Copy build outputs into source tree
        run: |
          mkdir -p h2o-3-src/build
          mkdir -p h2o-3-src/h2o-assemblies/minimal/build/libs
          mkdir -p h2o-3-src/h2o-assemblies/steam/build/libs
          mkdir -p h2o-3-src/h2o-assemblies/main/build/libs
          cp "$(find artifacts -name h2o.jar | head -n1)" h2o-3-src/build/h2o.jar
          cp "$(find artifacts -name minimal.jar | head -n1)" h2o-3-src/h2o-assemblies/minimal/build/libs/minimal.jar
          cp "$(find artifacts -name steam.jar | head -n1)" h2o-3-src/h2o-assemblies/steam/build/libs/steam.jar
          cp "$(find artifacts -name main.jar | head -n1)" h2o-3-src/h2o-assemblies/main/build/libs/main.jar
          
      - name: Run ${{ matrix.label }} test and save output
        shell: bash -l {0}
        working-directory: h2o-3-src
        continue-on-error: true
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate py311env
          set -o pipefail
          make -f scripts/jenkins/Makefile.jenkins ${{ matrix.make_target }} 2>&1 | tee full_output.log
          echo "${PIPESTATUS[0]}" > test_exit_code.txt
          
      - name: Extract section from 'Starting clouds' to end of file
        working-directory: h2o-3-src
        run: |
          RESULTS_FILE="full_output.log"
          if [[ -f "$RESULTS_FILE" ]]; then
            START_LINE=$(grep -n "^Starting clouds\.\.\." "$RESULTS_FILE" | cut -d: -f1 | head -n 1)
            if [[ -n "$START_LINE" ]]; then
              tail -n +"$START_LINE" "$RESULTS_FILE" > summary.txt
            else
              echo "Could not find 'Starting clouds...'. Dumping full log." > summary.txt
              cat "$RESULTS_FILE" >> summary.txt
            fi
          else
            echo "No result file found." > summary.txt
          fi
      - name: Upload test summary and log
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.label }}
          path: |
            h2o-3-src/summary.txt
          if-no-files-found: error
          retention-days: 3

      - name: Fail if test step failed
        shell: bash -l {0}
        working-directory: h2o-3-src
        run: |
          if [[ ! -f test_exit_code.txt ]]; then
            echo "Missing test_exit_code.txt! Marking as failed."
            exit 1
          fi
          EXIT_CODE=$(cat test_exit_code.txt)
          if [[ "$EXIT_CODE" -ne 0 ]]; then
            echo "Test failed. Failing the job now."
            exit $EXIT_CODE
          else
            echo "Test passed."
          fi
  test-flow-headless:
    needs: build-h2o-3
    runs-on: ubuntu-latest-16-cores
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: flow-headless-default
            make_target: test-flow-headless
          - label: flow-headless-smoke
            make_target: test-flow-headless-smoke
          - label: flow-headless-small
            make_target: test-flow-headless-small
          - label: flow-headless-medium
            make_target: test-flow-headless-medium

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Set up Conda (Python 3.8)
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: 3.8
          auto-activate-base: false
          auto-update-conda: false
          channels: conda-forge,defaults
          channel-priority: strict

      - name: Install system dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y libkrb5-dev gcc g++ python3-dev zip unzip
      - name: Cache conda environment
        uses: actions/cache@v3
        with:
          path: ~/miniconda/envs/py38env
          key: ${{ runner.os }}-conda-py38-${{ matrix.make_target }}
          restore-keys: ${{ runner.os }}-conda-py38-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: h2o-3-build
          path: artifacts

      - name: Download test-package-js
        uses: actions/download-artifact@v4
        with:
          name: test-package-js
          path: temp-js-package

      - name: Clone h2o-3 source
        run: git clone --depth 1 https://github.com/h2oai/h2o-3.git h2o-3-src

      - name: Create Conda environment
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda env list | grep -q "^py38env" || conda create -y -n py38env python=3.8 pip
      - name: Install Python dependencies & H2O wheel
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate py38env
          pip install -r h2o-py/ci-test-requirements-py38.txt
          pip install --upgrade pip wheel grip tabulate requests
          pip install "$(find artifacts -name '*.whl' | head -n 1)"
      - name: Integrate build artifacts and JS test package
        run: |
          mkdir -p h2o-3-src/{build,h2o-assemblies/minimal/build/libs,h2o-assemblies/steam/build/libs,h2o-assemblies/main/build/libs}
          cp "$(find artifacts -name h2o.jar | head -n1)" h2o-3-src/build/h2o.jar
          cp "$(find artifacts -name minimal.jar | head -n1)" h2o-3-src/h2o-assemblies/minimal/build/libs/
          cp "$(find artifacts -name steam.jar | head -n1)" h2o-3-src/h2o-assemblies/steam/build/libs/
          cp "$(find artifacts -name main.jar | head -n1)" h2o-3-src/h2o-assemblies/main/build/libs/
          unzip -q temp-js-package/test-package-js.zip -d extracted-js
          cp -r extracted-js/{h2o-web,tests,scripts} h2o-3-src/
      - name: Run ${{ matrix.label }} test and save output
        shell: bash -l {0}
        working-directory: h2o-3-src
        continue-on-error: true
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate py38env
          set -o pipefail
          make -f scripts/jenkins/Makefile.jenkins ${{ matrix.make_target }} 2>&1 | tee full_output.log
          echo "${PIPESTATUS[0]}" > test_exit_code.txt
      - name: Extract section from 'Starting clouds' to end of file
        working-directory: h2o-3-src
        run: |
          RESULTS_FILE="full_output.log"
          if [[ -f "$RESULTS_FILE" ]]; then
            START_LINE=$(grep -n "^Starting clouds\.\.\." "$RESULTS_FILE" | cut -d: -f1 | head -n 1)
            if [[ -n "$START_LINE" ]]; then
              tail -n +"$START_LINE" "$RESULTS_FILE" > summary.txt
            else
              echo "Could not find 'Starting clouds...'. Dumping full log." > summary.txt
              cat "$RESULTS_FILE" >> summary.txt
            fi
          else
            echo "No result file found." > summary.txt
          fi
      - name: Upload test summary and log
        uses: actions/upload-artifact@v4
        with:
          name: summary-${{ matrix.label }}
          path: |
            h2o-3-src/summary.txt
          if-no-files-found: error
          retention-days: 3

      - name: Fail if test step failed
        shell: bash -l {0}
        working-directory: h2o-3-src
        run: |
          if [[ ! -f test_exit_code.txt ]]; then
            echo "Missing test_exit_code.txt! Marking as failed."
            exit 1
          fi
          EXIT_CODE=$(cat test_exit_code.txt)
          if [[ "$EXIT_CODE" -ne 0 ]]; then
            echo "Test failed. Failing the job now."
            exit $EXIT_CODE
          else
            echo "Test passed."
          fi
  # test-r:
  #   needs: build-h2o-3
  #   runs-on: ubuntu-latest-16-cores
  #   continue-on-error: true
  #   timeout-minutes: 240
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - label: r-smoke
  #           make_target: test-r-smoke
  #         - label: r-init
  #           make_target: test-r-init
  #         - label: r-small
  #           make_target: test-r-small
  #         - label: r-explain
  #           make_target: test-r-explain
  #         - label: r-automl
  #           make_target: test-r-automl
  #         - label: r-automl-smoke-noxgb
  #           make_target: test-r-automl-smoke-noxgb
  #         - label: r-medium-large
  #           make_target: test-r-medium-large
  #         - label: r-datatable
  #           make_target: test-r-datatable
  #         - label: r-cmd-check
  #           make_target: test-r-cmd-check
  #         - label: r-cmd-check-as-cran
  #           make_target: test-r-cmd-check-as-cran
  #         - label: r-booklets
  #           make_target: test-r-booklets
  #         - label: r-demos-small
  #           make_target: test-r-demos-small
  #         - label: r-demos-ml
  #           make_target: test-r-demos-medium-large
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 11

  #     - name: Set up R
  #       uses: r-lib/actions/setup-r@v2

  #     - name: Install system libraries
  #       run: |
  #         sudo apt-get update -q
  #         sudo apt-get install -y libcurl4-openssl-dev libxml2-dev \
  #                                  libssl-dev libkrb5-dev gcc g++ make

  #     - name: Install base R packages
  #       run: |
  #         echo "R_LIBS_USER=$HOME/R/library" >> "$GITHUB_ENV"
  #         mkdir -p "$HOME/R/library"
  #         Rscript -e 'install.packages(
  #             c("RCurl","jsonlite","statmod","devtools","roxygen2","testthat","data.table","knitr"),
  #             repos="https://cloud.r-project.org",
  #             Ncpus=2
  #         )'

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: h2o-3-build
  #         path: artifacts

  #     - name: Download test-package-r
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: test-package-r
  #         path: temp-r-package

  #     - name: Clone H2O-3 source
  #       run: git clone --depth 1 https://github.com/h2oai/h2o-3.git h2o-3-src

  #     - name: Copy build outputs into source tree
  #       run: |
  #         mkdir -p h2o-3-src/build
  #         mkdir -p h2o-3-src/h2o-assemblies/minimal/build/libs
  #         mkdir -p h2o-3-src/h2o-assemblies/steam/build/libs
  #         mkdir -p h2o-3-src/h2o-assemblies/main/build/libs

  #         cp "$(find artifacts -name h2o.jar | head -n1)" h2o-3-src/build/h2o.jar
  #         cp "$(find artifacts -name minimal.jar | head -n1)" h2o-3-src/h2o-assemblies/minimal/build/libs/minimal.jar
  #         cp "$(find artifacts -name steam.jar | head -n1)" h2o-3-src/h2o-assemblies/steam/build/libs/steam.jar
  #         cp "$(find artifacts -name main.jar | head -n1)" h2o-3-src/h2o-assemblies/main/build/libs/main.jar

  #         unzip -q temp-r-package/test-package-r.zip -d extracted-r
  #         cp -r extracted-r/h2o-r h2o-3-src/

  #     - name: Restore smalldata
  #       uses: actions/cache@v4
  #       with:
  #         path: smalldata
  #         key: smalldata-v1

  #     - name: Link smalldata and bigdata
  #       run: |
  #         ln -s -f smalldata/ smalldata

  #     - name: Run ${{ matrix.label }} target
  #       working-directory: h2o-3-src
  #       run: |
  #         ls h2o-r/R/src/contrib
  #         R CMD INSTALL h2o-r/R/src/contrib/*.tar.gz  
  #         make -f scripts/jenkins/Makefile.jenkins ${{ matrix.make_target }}

  # test-java:
  #   needs: build-h2o-3
  #   runs-on: ubuntu-22.04
  #   continue-on-error: true
  #   timeout-minutes: 240
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - label: test-junit-11-smoke-jenkins
  #           make_target: test-junit-16-smoke

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Java 11
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: temurin
  #         java-version: 11

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18

  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.7

  #     - name: Install Python build tools
  #       run: python -m pip install --upgrade pip wheel grip tabulate requests

  #     - name: Set up R 3.4.1
  #       uses: r-lib/actions/setup-r@v2
  #       with:
  #         r-version: 3.4.1

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: h2o-3-build
  #         path: artifacts

  #     - name: Download test-package-js
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: test-package-js
  #         path: temp-js-package

  #     - name: Download test-package-java
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: test-package-java
  #         path: temp-java-package

  #     - name: Clone H2O-3 source
  #       run: git clone --depth 1 https://github.com/h2oai/h2o-3.git h2o-3-src

  #     - name: Copy h2o.jar and assembly jars
  #       run: |
  #         mkdir -p h2o-3-src/build
  #         mkdir -p h2o-3-src/h2o-assemblies/minimal/build/libs
  #         mkdir -p h2o-3-src/h2o-assemblies/steam/build/libs
  #         mkdir -p h2o-3-src/h2o-assemblies/main/build/libs
  #         cp "$(find artifacts -name h2o.jar | head -n 1)" h2o-3-src/build/h2o.jar
  #         cp "$(find artifacts -name minimal.jar | head -n 1)" h2o-3-src/h2o-assemblies/minimal/build/libs/minimal.jar
  #         cp "$(find artifacts -name steam.jar | head -n 1)" h2o-3-src/h2o-assemblies/steam/build/libs/steam.jar
  #         cp "$(find artifacts -name main.jar | head -n 1)" h2o-3-src/h2o-assemblies/main/build/libs/main.jar
  #         unzip -q temp-java-package/test-package-java.zip -d extracted-java
  #         cp -r extracted-java/* h2o-3-src/

  #     - name: Restore smalldata
  #       uses: actions/cache@v4
  #       with:
  #         path: smalldata
  #         key: smalldata-v1

  #     - name: Restore bigdata
  #       uses: actions/cache@v4
  #       with:
  #         path: bigdata
  #         key: bigdata-v1

  #     - name: Link smalldata and bigdata
  #       run: |
  #         ln -s -f smalldata/ smalldata
  #         ln -s -f bigdata/ bigdata

  #     - name: Run ${{ matrix.label }} target
  #       working-directory: h2o-3-src
  #       run: |
  #          make -f scripts/jenkins/Makefile.jenkins ${{ matrix.make_target }}

  #     - name: Extract test summary to summary.txt
  #       working-directory: h2o-3-src
  #       run: |
  #         RESULTS_FILE=$(find h2o-py/tests/results -type f -name '*.out.txt' | head -n 1)
  #         if [[ -f "$RESULTS_FILE" ]]; then
  #           START_LINE=$(grep -n "Starting .* tests on .* clouds" "$RESULTS_FILE" | cut -d: -f1 | head -n 1)
  #           END_LINE=$(grep -n "True fail list:" "$RESULTS_FILE" | cut -d: -f1 | head -n 1)
  #           if [[ -n "$START_LINE" && -n "$END_LINE" && "$END_LINE" -ge "$START_LINE" ]]; then
  #             sed -n "${START_LINE},${END_LINE}p" "$RESULTS_FILE" > summary.txt
  #           else
  #             echo "Summary markers not found or invalid range." > summary.txt
  #           fi
  #         else
  #           echo "No result file found." > summary.txt
  #         fi

  #     - name: Upload summary.txt with job label
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: summary-${{ matrix.label }}
  #         path: h2o-3-src/summary.txt
  #         if-no-files-found: error
  #         retention-days: 3
