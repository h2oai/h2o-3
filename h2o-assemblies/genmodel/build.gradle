apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java-library'
apply plugin: 'com.github.hierynomus.license'

description = "H2O GenModel Assembly which is embedded into H2O.jar"

// MOJO has to stay Java 1.7 compatible! 
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Dependencies
dependencies {
    api project(":h2o-genmodel")
}

// Include optional components
for (comp in optionalComponents) {
    def compName = comp['name']
    def compVersion = comp['version']
    def compEnabled = comp['enabled']
    def compPropName = "with${compName.capitalize()}"
    def compPropVersionName = "${compName}Version"
    def compIsGenModel = comp['genmodel']

    if (!project.hasProperty(compPropVersionName)) {
        project.ext.set(compPropVersionName, compVersion)
    }
    if (compIsGenModel) {
        if (compEnabled || project.hasProperty(compPropName) && project.property(compPropName)) {
            logger.lifecycle("== ${project.path}: Using optional genmodel component: ${compName}, version ${project.findProperty(compPropVersionName)}")
            apply from: "$rootDir/gradle/components/${compName}-genmodel.gradle"
        }
    }
}

shadowJar {
  mergeServiceFiles()
  classifier = ''
  relocate 'com.google.gson', 'ai.h2o.com.google.gson' // Should be eventually removed: https://github.com/h2oai/h2o-3/issues/12372
  relocate 'org.apache.commons.text', 'ai.h2o.org.apache.commons.text'
  relocate 'org.apache.commons.lang3', 'ai.h2o.org.apache.commons.lang3'
  relocate 'org.antlr', 'ai.h2o.org.antlr'  
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.SF'
  exclude 'synchronize.properties'
  exclude 'uploader.properties'
  exclude 'test.properties'
  exclude 'cockpitlite.properties'
  exclude 'devpay_products.properties'
  transform(com.github.jengelman.gradle.plugins.shadow.transformers.IncludeResourceTransformer.class) {
    file = file("${buildDir}/reports/license/dependency-license.xml")
    resource = "META-INF/license/h2o-depenencies-licenses.xml"
  }
}

artifacts {
  archives shadowJar
}

// Disable regular jar since the project is empty
jar.enabled = false
// Plug ShadowJar task into execution graph
shadowJar.dependsOn(project.tasks.getByName('downloadLicenses'))
build.dependsOn shadowJar

